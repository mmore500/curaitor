name: CI
on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches:
      - '**'
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:
jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: |
          python3 -m pip install pip --upgrade
          python3 -m pip install -r requirements-dev.txt
      - run: ./lint.sh

  style:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: |
          python3 -m pip install pip --upgrade
          python3 -m pip install -r requirements-dev.txt
      - run: ./style.sh

  unit-test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: |
          python3 -m pip install pip --upgrade
          python3 -m pip install -r requirements-dev.txt
      - run: ./test.sh

  binder-test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Ollama, Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl -fsSL https://ollama.com/install.sh | sudo -E sh
      - name: Install winget
        if: matrix.os == 'windows-latest'
        uses: Cyberboss/install-winget@v1
      - name: Install Ollama, Windows
        if: matrix.os == 'windows-latest'
        run: |
          winget install --id=Ollama.Ollama -e --accept-package-agreements --accept-source-agreements
      - name: Install Ollama, MacOS
        if: matrix.os == 'macos-latest'
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew install --cask ollama
      - name: Start serving ollama
        run: |
            # Pull models
            ollama pull llama3 &
            ollama pull nomic-embed-text &

            # Run the background, there is no way to daemonise at the moment
            ollama serve &

            # A short pause is required before the HTTP port is opened
            sleep 5

            # This endpoint blocks until ready
            curl -i http://localhost:11434
      - run: |
          python3 -m pip install pip --upgrade
          python3 -m pip install -r requirements-dev.txt
      - run: ./binder/execute_notebooks.sh
        shell: bash
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  binder-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sudo -E sh
      - name: Start serving
        run: |
            # Run the background, there is no way to daemonise at the moment
            ollama serve &

            # A short pause is required before the HTTP port is opened
            sleep 5

            # This endpoint blocks until ready
            time curl -i http://localhost:11434
      - name: Pull models
        run: |
          ollama pull llama3
          ollama pull nomic-embed-text
      - run: |
          sudo apt-get update -y
          sudo apt-get install -y ghostscript
          python3 -m pip install pip --upgrade
          python3 -m pip install -r requirements-dev.txt
      # Adapted from https://askubuntu.com/a/524368
      - run: ./binder/execute_notebooks.sh
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      # adapted from https://unix.stackexchange.com/a/545630
      - run: find -type f -name "*.pdf" -exec bash -c 'gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/screen -dNOPAUSE -dBATCH -dQUIET -sOutputFile="new.pdf" "{}"; rm "{}"; mv "new.pdf" "{}";' {} \;
      - run: git init
      - uses: fregante/setup-git-user@v1
      - run: git commit --allow-empty -m "Initial commit"
      - uses: JamesIves/github-pages-deploy-action@4.0.0
        with:
          branch: binder # The branch the action should deploy to.
          folder: . # The folder the action should deploy.
